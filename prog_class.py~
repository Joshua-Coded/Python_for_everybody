class Progression:
    """ Iterator producing a generic progression.

Default iterator produce the whole number 0,1,2,...
"""
    def __init__(self, start=0):
        """ Initilize current to the first value of the progression."""
        self._current = start

        def _advance(self):
            """ update self.current to a new value.
            
            This should be overridden by a subclass to customize progression
            
            By convention, if current is set to  Non. this designate the end of a finite progression"""
            self._current += 1

        def __next__(self):
            """ returning the next element, or else raise StopIterator error."""

            if self._current is None:
                raise StopIterator()
            else:
                answer = self._current
                self._advance
                return answer



        def __iter__(self):
            """ By convention, an iterator must return itself as an iterator."""
            return self

        def print_progression(self, n):
            """ Print next n value of the progression."""
            print(" ".join(str(next(self)) for j in range(n)))


class ArithmeticProgression(Progression):
    """ Iterator producing an arithmetic progression."""

    def __init__(self, increment=1, start=0):
        """ create a new arthmetic progression.
        
        increment the fixed constant to add to each term (defualt 1)
        start the first term of the progression (default 0)
"""

        super().__init__(start)
        self._increment = increment

    def _advance(self):
        """ update current value by adding the fixed increment."""
        self._current += self._increment


class GeometricProgression(Progression):
    """Iterator producing a geometric progression. """

    def __init__(self, base=2, start=1):
        """ Create a new geometric progression.
        base     the fixed constant multiplied to each term (default 2)
        start    the first term of the progression  (default 1)

        """

        super().__init__(start)
        self._base = base

    def _advance(self):
        """ update current value by multiplying it by the base value """

        self._current *= self._base


class FibonacciProgression(Progression):
    """Iterator producing a generalized fibonacci progression .

      first       the first term of the progression (default 0
            
      second        the second term of the progressino (default )
      """
    def __init__(self, first=0, second = 1):
        
        super().__init__(first)
        self._prev = second - first

    def _advance(self):
        """update """
        self._prev, self._current = self._current, self._prev + self._current



if __name__ == '__main__':
    print("default progression: ")
    Progression().print_progression(10)


    print("Arithmeti progression with increment 5: ")
    ArithmeticProgression(5).print_progression(10)

    
    print("Arithmeti progression with increment 5 and start 2: ")
    ArithmeticProgression(5, 2).print_progression(10)
    
    print("Geometric progression with default start values: ")
    GeometricProgression().print_progression(10)

    print("Geometric progression with base 3: ")
    GeometricProgression(3).print_progression(10)

    
    print("Show us our fibonacci progression with start values: ")
    FibonacciProgression().print_progression(10)

    print("Fibonacci progression with start values 4 and 6:")
    FibonacciProgression(4, 6).print_progression(10)
